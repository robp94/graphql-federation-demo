"The @provides directive is used to annotate the expected returned fieldset from a field on a base type that is guaranteed to be selectable by the gateway."
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

"Some libraries such as graphql-java don't have native support for type extensions in their printer. Apollo Federation supports using an @extends directive in place of extend type to annotate type references."
directive @extends on OBJECT | INTERFACE

"The @key directive is used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface."
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

"The @requires directive is used to annotate the required input fieldset from a base type for a resolver. It is used to develop a query plan where the required fields may not be needed by the client, but the service may need additional information from other services."
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"The @external directive is used to mark a field as owned by another service. This allows service A to use fields from service B while also knowing at runtime the types of that field."
directive @external on FIELD_DEFINITION

union _Entity = Film

type Film @key(fields: "id") {
    id: ID!
    title: String
    year: String
}

"Query root"
type Query {
    _entities(representations: [_Any!]!): [_Entity]!
    _service: _Service!
    film(id: String): Film
    films: [Film]!
}

type _Service {
    "The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"
    sdl: String!
}

scalar _Any

scalar _FieldSet
