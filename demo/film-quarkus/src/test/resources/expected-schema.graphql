"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"When resolving the annotated field, this service can provide additional, normally `@external` fields."
directive @provides(fields: [String]) on FIELD_DEFINITION

"Some libraries such as graphql-java don't have native support for type extensions in their printer. Apollo Federation supports using an @extends directive in place of extend type to annotate type references."
directive @extends on OBJECT | INTERFACE

"The @key directive is used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface."
directive @key(fields: [String]) on OBJECT | INTERFACE

"In order to resolve the annotated field, this service needs these additional `@external` fields, even when the client didn't request them."
directive @requires(fields: [String]) on FIELD_DEFINITION

"The @external directive is used to mark a field as owned by another service. This allows service A to use fields from service B while also knowing at runtime the types of that field."
directive @external on FIELD_DEFINITION

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"This is a union of all types that use the @key directive, including both types native to the schema and extended types."
union _Entity = Film

type Film @key(fields : ["id"]) {
  id: ID!
  title: String
  year: String
}

"Query root"
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  film(id: String): Film
  films: [Film]!
}

type _Service {
  "The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"
  sdl: String!
}

scalar _Any

scalar _FieldSet
